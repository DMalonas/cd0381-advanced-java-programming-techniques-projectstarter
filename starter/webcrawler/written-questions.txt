Written Questions

Q1. Run the web crawler using the configurations located at src/main/config/written_question_1a.json and
    src/main/config/written_question_1b.json. The only difference between these configurations is that one always uses
    the sequential crawler and the other always uses the parallel crawler. Inspect the profile output in
    profileData.txt.

    If you are using a multi-processor computer, you should notice that SequentialWebCrawler#crawl and
    ParallelWebCrawler#crawl took about the same amount of time, but PageParserImpl#parse took much longer when run with
    the ParallelWebCrawler.

    Why did the parser take more time when run with ParallelWebCrawler?

The Profiler sums the time taken by the parse method for all threads.
In the ProfilingMethodInterceptor, the record method of the ProfilingState class sums the duration received.



Q2. Your manager ran your crawler on her old personal computer, using the configurations from Q1, and she notices that
    the sequential crawler actually outperforms the parallel crawler. She would like to know why.

    (a) Suggest one reason why the sequential web crawler was able to read more web pages than the parallel crawler.
        (Hint: Try setting "parallelism" to 1 in the JSON configs to simulate your manager's computer.)

A parallel web crawler uses more resources on a single thread computer, since the main requirement for optimal performance is to have a larger number of threads.
On an old computer, it does not perform well.
As It works better on a computer with only one thread since sequential web crawlers work sequentially without using more than one thread.


    (b) Suggest one scenario in which the parallel web crawler will almost certainly perform better than the sequential
        crawler. Why will it perform better?

On a multi-core computer, the parallel web crawler performs bettern than the sequential web crawler due to the
the parallel crawl functionality that becomes possible through the larger number of threads - a direct result of
the multicore architecture (more cores, means more threads).


Q3. Analyze your method profiler through the lens of Aspect Oriented Programming, by answering the following questions:

    (a) What cross-cutting concern is being addressed by the com.udacity.webcrawler.profiler.Profiler class?

    The Profiler's performance.

    (b) What are the join points of the Profiler in the web crawler program?

    The @Profiled annotated methods.


Q4. Identify three (3) different design patterns used in this project, and explain which interfaces, classes, and/or
    libraries use or implement those design patterns.

    For each pattern, name one thing about the pattern that you LIKED, and one thing you DISLIKED. If you did not like
    anything, you can name two things you disliked.

    - Dependency Injection - It's used in the WebCrawlerMain and Profiler classes. It uses the Guice plugin to inject dependencies.
    The code is easier to maintain and reuse. Difficult to find error in case you need to debug


    - Builder Pattern - The CrawlerConfiguration, CrawlResult, ParserModule classes and PageParser interface uses the Builder method.
     Provides control over steps of construction process. Code duplication

    - Proxy Pattern - ProfilerImpl class.
    Avoids duplication of objects. Its a bit complicated.